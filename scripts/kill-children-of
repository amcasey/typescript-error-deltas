#!/bin/bash

if [[ -z "$1" ]]; then echo "missing PPID argument" 1>&2; exit 1; fi
if [[ "x$1" = "x-h" || "x$1" = "x--help" ]]; then
  echo "Usage: $0 PPID [cmdline-regexp]"
  exit 0
fi

target="$1"; shift; this="$$"; parent="$PPID"

pids=()
live_pids() {
  cmd=(ps -o "pid=")
  while [[ "x$1" = "x-o" ]]; do cmd+=("$1" "$2"); shift 2; done
  if [[ "$#" -eq "0" ]]; then "${cmd[@]}" --pid "${pids[*]}"
  else "${cmd[@]}" "$@"; fi
}

get_decendants() {
  ppid="$1"; shift
  for p in $(live_pids --ppid "$ppid"); do
    if [[ "$p" -eq "$this" || "$p" -eq "$parent"  ]]; then continue; fi
    pids+=("$p")
    get_decendants "$p"
  done
}

check_exit() {
  if [[ "${#pids[*]}" -eq "0" ]]; then
    echo "nothing to kill"; exit
  fi
}

get_decendants "$target"
check_exit

if [[ -n "$1" ]]; then
  mapfile -t tmp < <(live_pids -o "cmd=")
  pids=(); rx="^ *([0-9]+) (.*)$"
  for p in "${tmp[@]}"; do
    if ! [[ "$p" =~ $rx ]]; then continue; fi
    pid="${BASH_REMATCH[1]}" cmd="${BASH_REMATCH[2]}"
    if [[ "$cmd" =~ $1 ]]; then pids+=("$pid"); fi
  done
fi
check_exit

printf "Killing PIDs:\n"
ps --no-headers -o "  %p %a" --pid "${pids[*]}"

for p in $(live_pids); do
  kill -15 "$p" >/dev/null 2>&1; done

sleep 1
pids=($(live_pids))
if [[ "${#pids[*]}" -eq "0" ]]; then exit 0; fi

printf "Hard killing PIDs: %s\n" "${pids[*]}"
for p in $(live_pids); do
  kill -9 "$p" >/dev/null 2>&1; done

sleep 1
pids=($(live_pids))
if [[ "${#pids[*]}" -eq "0" ]]; then exit 0; fi

printf "Some processes did not die: %s\n" "${pids[*]}"
